geom_point(mapping = aes(x=displ, y=hwy))+
facet_wrap(. ~ year)
?mpg
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
facet_wrap(. ~ cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ drv)
?facet_wrap
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(data = filter(mpg, class == "drv"), se = FALSE)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_point()+
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv), show.legend = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point()+
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point()+
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point()+
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv, se == FALSE)) +
geom_point()+
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv, se = FALSE)) +
geom_point()+
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, linetype = drv, se = FALSE)) +
geom_point()+
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, linetype = drv), se == FALSE) +
geom_point()+
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point()+
geom_smooth(mapping = aes=(linetype = drv), se==FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point()+
geom_smooth(mapping = aes(linetype = drv), se==FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point()+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv), se == FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point()+
geom_smooth(data = filter(mpg, class == "drv"), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point()+
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
?mpg
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point()+
geom_smooth(data = filter(mpg, drv), se = FALSE)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv), se == FALSE)+
geom_point()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, linetype = drv)) +
geom_smooth(se == FALSE)+
geom_point()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv, color = drive)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy) +
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(mapping = aes(se=false))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color=drv)) +
geom_smooth(se = FALSE)
?CLASS
??class
install.packages('readxl')
read_excel()
install.packages("Seurat")
1*1
1*5
4%3
4+1
10 % 4
10 mod 2
2/3
2**4
5 %% 3
d
hello <- print ("hello")
deposit <- 20
bank.account <- bank.account + deposit
nvec <- c(1,2,3,4,5)
nvec
class(nvec)
cvec <- c("U", "S", "A")
cvec
lvec <- c(T, F)
v <- c(T, 20, 40)
v
temps <- c(72, 71, 68, 45, 28, 75, 60)
temps
names(temps) <- c("Mon", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
temps
days <- c("Mon", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
names(temps) <- days
temps
v1 <- c(1,2,3)
v2 <- c(4,5,6)
v1 + v2
v1 - v2
v1 * v2
v1 / v2
v1 %% v2
sum(v1)
sum.of.vec <- sum(v1)
sum.of.vec
mean(v1)
stdev(v1)
sd(v1)
min(v1)
max(v1)
v <- c(1,2,3,4,5)
v < 2
v == 3
c(5,5)
matrix(1:25, byrow = F, nrow = 5)
mat -> matrix(1:26, byrow = F, nrow = 5)
mat <- matrix(1:26, byrow = F, nrow = 5)
mat <- matrix(1:265, byrow = F, nrow = 5)
mat <- matrix(1:25, byrow = F, nrow = 5)
mat^2
1/mat
mat > 15
mat + mat
mat/mat
mat^mat
mdkir FG - Assignment1
mdkir <FG>-Assignment1
help mkdir
mkdir
ls
cd
~
setwd
getwd()
setwd(C:\Users\Furkan\OneDrive - University of Toronto\Gray-Owen\Course_materials\Intro_to_programming\Week_1)
setwd(/c/Users/Furkan/OneDrive - University of Toronto/Gray-Owen/Course_materials/Intro_to_programming/Week_1/FG_Assignment1)
setwd(c/Users/Furkan/OneDrive - University of Toronto/Gray-Owen/Course_materials/Intro_to_programming/Week_1/FG_Assignment1)
print("Hello")
cat("hello", "world")
help(seq)
seq(1,3,0.2)
seq(1,4,length.out=3)
seq(to=5, from=10)
seq(from=10, to=5)
x = 5
x
number = 5
number
#note: the variable value specifies its type, not its name, 'x' can also be a number
x = 5
x
number <- 5  #<- is the same as =
number
string = "five"
string
number = number +1
number
logical = TRUE
logical
logical2 = T  #note: T and TRUE are equivalent (they are both TRUE)
logical2
logical3 = FALSE
logical3
logical4 = F  #same with F and FALSE
logical4
#Reminder: the variable names do not tell you anything about the variable type
number = "string"
number
string = string + 1   #why is there an error when you try to run this code? Note: R only figures this out when you try to run the code, not when you're writing it, so you need to be aware of the variable types you're using when you're writing code
print("Hello")
print("Hello")
cat("hello", "world")
print("Hello")
cat("hello", "world")
help(seq)
seq(1,3,0.2)
seq(1,4,length.out=3)
seq(to=5, from=10)
seq(from=10, to=5)
x = 5
x
number = 5
number
#note: the variable value specifies its type, not its name, 'x' can also be a number
x = 5
x
number <- 5  #<- is the same as =
number
string = "five"
string
number = number +1
number
logical = TRUE
logical
logical2 = T  #note: T and TRUE are equivalent (they are both TRUE)
logical2
logical3 = FALSE
logical3
logical4 = F  #same with F and FALSE
logical4
#Reminder: the variable names do not tell you anything about the variable type
number = "string"
number
string = string + 1   #why is there an error when you try to run this code? Note: R only figures this out when you try to run the code, not when you're writing it, so you need to be aware of the variable types you're using when you're writing code
help(cat)
help(seq)
seq(1,3,0.2)
seq(1,4,length.out=3)
seq(1,4,length.out=4)
#length.out specifies how many variables to be output
seq(1,4,length.out=2)
#length.out specifies how many variables to be output
seq(1,4,length.out=3)
#length.out specifies how many variables to be output
x = 5
x
#x is the variable here, used to store the value 5
name = "Tom"
name
name1 = "Tom"
name1
.name1 = "Tom"
.name1
.name@1 = "Tom"
.name1 = 1
.name1
number = 5
number
#note: the variable value specifies its type, not its name, 'x' can also be a number
x = 5
x
number <- 5  #<- is the same as =
number
string = "five"
string
number = number +1
number
logical = TRUE
logical
logical2 = T  #note: T and TRUE are equivalent (they are both TRUE)
logical2
logical3 = FALSE
logical3
logical4 = F  #same with F and FALSE
logical4
#Reminder: the variable names do not tell you anything about the variable type
number = "string"
number
string = string + 1   #why is there an error when you try to run this code? Note: R only figures this out when you try to run the code, not when you're writing it, so you need to be aware of the variable types you're using when you're writing code
string
`number`
number
number = 5
number + 1
number = "string"
number
cat string + number
cat(number, string)
#Mixing variables within strings:
number = 5
string = "hello"
paste("Number", number, "String", string)
#How do you print a quote?
string = "gene \"ABC\""
sum(number1, number2)
number1 = 1
number2 = 2
sum(number1, number2)
prod(number1, number2)
ratio(number1, number2)
div(number1, number2)
ratio = number1/number2
ratio
print("Hello")
getwd()
setwd("C:/Users/Furkan/Desktop/PBMC_CITEseq-master")
shiny::runApp()
install.packages("clusterProfiler")
runApp()
runApp()
runApp()
setwd("C:/Users/Furkan/OneDrive - University of Toronto/Gray-Owen/Course_materials/Intro_to_programming/Week_5/Assignment5")
system2("cmd.exe", input = "primer3-1.1.4-WINXP/bin/primer3_core.exe < example")
system2("primer3-1.1.4-WINXP/bin/primer3_core.exe",stdin="primer3-1.1.4-WINXP/example")
?system2
setwd("C:/Users/Furkan/OneDrive - University of Toronto/Gray-Owen/Course_materials/Intro_to_programming/Week_5/Assignment5")
library(stringr)
fasta <- readLines("yeastChromosome16Genes-DNA.fasta", warn = F)
read_fasta = function(fasta){
#Index of yeast gene names
s <- grep(">", fasta)
#creating dataframe listing the range of the length of the sequences of each gene
genes <- data.frame(index = s, from = s+1, to = c((s-1)[-1], length(fasta)))
#constructing the genes into the dataframe
sequences <- rep(NA, length(s))
for(i in 1:length(s)) {
sequences[i]<-paste(fasta[genes$from[i]:genes$to[i]], collapse="")
}
#putting together the ORF name and 2k sequences
sequenceDatabase <- data.frame(sequenceNames=regmatches(fasta[s], "Y[A-P](R|L)[0-9]{3}(W|C)"),
sequence = sequences)
}
seqs <- read_fasta(fasta)
?regmatches
read_fasta = function(fasta){
#Index of yeast gene names
s <- grep(">", fasta)
#creating dataframe listing the range of the length of the sequences of each gene
genes <- data.frame(index = s, from = s+1, to = c((s-1)[-1], length(fasta)))
#constructing the genes into the dataframe
sequences <- rep(NA, length(s))
for(i in 1:length(s)) {
sequences[i]<-paste(fasta[genes$from[i]:genes$to[i]], collapse="")
}
#putting together the ORF name and 2k sequences
sequenceDatabase <- data.frame(sequenceNames=grep(fasta[s], "Y[A-P](R|L)[0-9]{3}(W|C)", value = T),
sequence = sequences)
}
seqs <- read_fasta(fasta)
fasta[1]
grep(fasta[1], "Y[A-P](R|L)[0-9]{3}(W|C)", value = T)
grep(fasta[1], "Y", value = T)
?str_Extract
?str_extract
read_fasta = function(fasta){
#Index of yeast gene names
s <- grep(">", fasta)
#creating dataframe listing the range of the length of the sequences of each gene
genes <- data.frame(index = s, from = s+1, to = c((s-1)[-1], length(fasta)))
#constructing the genes into the dataframe
sequences <- rep(NA, length(s))
for(i in 1:length(s)) {
sequences[i]<-paste(fasta[genes$from[i]:genes$to[i]], collapse="")
}
#putting together the ORF name and 2k sequences
sequenceDatabase <- data.frame(sequenceNames=str_extract(fasta[s], "Y[A-P](R|L)[0-9]{3}(W|C)", value = T),
sequence = sequences)
}
seqs <- read_fasta(fasta)
fasta <- readLines("yeastChromosome16Genes-DNA.fasta", warn = F)
read_fasta = function(fasta){
#Index of yeast gene names
s <- grep(">", fasta)
#creating dataframe listing the range of the length of the sequences of each gene
genes <- data.frame(index = s, from = s+1, to = c((s-1)[-1], length(fasta)))
#constructing the genes into the dataframe
sequences <- rep(NA, length(s))
for(i in 1:length(s)) {
sequences[i]<-paste(fasta[genes$from[i]:genes$to[i]], collapse="")
}
#putting together the ORF name and 2k sequences
sequenceDatabase <- data.frame(sequenceNames=str_extract(fasta[s], "Y[A-P](R|L)[0-9]{3}(W|C)"),
sequence = sequences)
}
seqs <- read_fasta(fasta)
View(seqs)
#read primer3 example file and split the dataframe into two columns
primer3_file <- read.table("example", sep = "\t")
primer3_file <- str_split_fixed(primer3_file$V1, "=", 2)
setwd("C:/Users/Furkan/OneDrive - University of Toronto/Gray-Owen/Course_materials/Intro_to_programming/Week_5/Assignment5/primer3-1.1.4-WINXP/bin")
#read primer3 example file and split the dataframe into two columns
primer3_file <- read.table("example", sep = "\t")
primer3_file <- str_split_fixed(primer3_file$V1, "=", 2)
View(primer3_file)
fasta_row_count <- nrow(fasta)
fasta_row_count <- nrow(seqs)
nrow(seqs)
library(dplyr)
read_fasta = function(fasta){
#Index of yeast gene names
s <- grep(">", fasta)
#creating dataframe listing the range of the length of the sequences of each gene
genes <- data.frame(index = s, from = s+1, to = c((s-1)[-1], length(fasta)))
#constructing the genes into the dataframe
sequences <- rep(NA, length(s))
for(i in 1:length(s)) {
sequences[i]<-paste(fasta[genes$from[i]:genes$to[i]], collapse="")
}
#putting together the ORF name and 2k sequences
sequenceDatabase <- data.frame(sequenceNames=str_extract(fasta[s], "Y[A-P](R|L)[0-9]{3}(W|C)"),
sequence = mutate_all(sequences, funs = toupper))
}
seqs <- read_fasta(fasta)
read_fasta = function(fasta){
#Index of yeast gene names
s <- grep(">", fasta)
#creating dataframe listing the range of the length of the sequences of each gene
genes <- data.frame(index = s, from = s+1, to = c((s-1)[-1], length(fasta)))
#constructing the genes into the dataframe
sequences <- rep(NA, length(s))
for(i in 1:length(s)) {
sequences[i]<-paste(fasta[genes$from[i]:genes$to[i]], collapse="")
}
#putting together the ORF name and 2k sequences
sequenceDatabase <- data.frame(sequenceNames=str_extract(fasta[s], "Y[A-P](R|L)[0-9]{3}(W|C)"),
sequence = sequences)
sequenceDatabase <- mutate_all(sequenceDatabase, funs = toupper)
}
seqs <- read_fasta(fasta)
library(dplyr)
fasta <- readLines("yeastChromosome16Genes-DNA.fasta", warn = F)
read_fasta = function(fasta){
#Index of yeast gene names
s <- grep(">", fasta)
#creating dataframe listing the range of the length of the sequences of each gene
genes <- data.frame(index = s, from = s+1, to = c((s-1)[-1], length(fasta)))
#constructing the genes into the dataframe
sequences <- rep(NA, length(s))
for(i in 1:length(s)) {
sequences[i]<-paste(fasta[genes$from[i]:genes$to[i]], collapse="")
}
#putting together the ORF name and 2k sequences
sequenceDatabase <- data.frame(sequenceNames=str_extract(fasta[s], "Y[A-P](R|L)[0-9]{3}(W|C)"),
sequence = sequences)
sequenceDatabase <- mutate_all(sequenceDatabase, funs = toupper)
}
seqs <- read_fasta(fasta)
read_fasta = function(fasta){
#Index of yeast gene names
s <- grep(">", fasta)
#creating dataframe listing the range of the length of the sequences of each gene
genes <- data.frame(index = s, from = s+1, to = c((s-1)[-1], length(fasta)))
#constructing the genes into the dataframe
sequences <- rep(NA, length(s))
for(i in 1:length(s)) {
sequences[i]<-paste(fasta[genes$from[i]:genes$to[i]], collapse="")
}
#putting together the ORF name and 2k sequences
sequenceDatabase <- data.frame(sequenceNames=str_extract(fasta[s], "Y[A-P](R|L)[0-9]{3}(W|C)"),
sequence = sequences)
}
seqs <- read_fasta(fasta)
seqs <- mutate_all(seqs, funs = toupper)
?mutate_all
?mutate
seqs <- mutate(seqs$sequence, funs = toupper)
seqs <- mutate_all(seqs, funs = toupper())
seqs <- mutate_all(seqs, funs = toupper)
seqs %>% mutate(seqs$sequenceNames, funs = toupper)
seqs
seqs <- mutate_all(seqs, funs(toupper))
View(seqs)
